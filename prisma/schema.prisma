generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model InfoCustomer {
  fullname  String
  phone     String
  location  String
  province  String
  district  String
  ward      String
  address   address? @relation(fields: [addressId], references: [id])
  addressId String?

  @@unique([fullname, phone, location])
}

model users {
  id        String    @id @default(uuid())
  role      UserRole      @default(USER)
  email     String    @unique
  username  String?   @unique
  phone     String?   @unique
  fullname  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  address   address[]
  orders    orders[]

  @@index([email, username, phone])
}

model address {
  id           String         @id @default(uuid())
  isDefault    Boolean        @default(false)
  user         users          @relation(fields: [userId], references: [id])
  userId       String
  InfoCustomer InfoCustomer[]
  orders       orders[]

  @@unique([userId, isDefault])
}

model categories {
  id       String     @id @default(uuid())
  isActive Boolean    @default(true)
  slug     String     @unique
  title    String
  images   String[]
  products products[]

  @@unique([slug, title])
}

model products {
  id          String     @id @default(uuid())
  category    String
  categories  categories @relation(fields: [category], references: [id])
  images      String[]
  name        String
  description String
  price       Decimal    @db.Money
  discount    Int
  quantity    Int
  sold        Int
  ranking     Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([category, name])
}

model orders {
  id             String           @id @default(uuid())
  location       address          @relation(fields: [locationId], references: [id])
  locationId     String
  orderID        String
  orderDate      DateTime
  order_status   OrderStatus      @default(PENDING)
  total_price    Decimal          @db.Money
  user           users?           @relation(fields: [userId], references: [id])
  userId         String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ordersProducts ordersProducts[]

  @@unique([userId, orderID])
}

model ordersProducts {
  quantity Int
  discount Int
  image    String
  name     String
  price    Decimal @db.Money
  order    orders  @relation(fields: [orderId], references: [id])
  orderId  String

  @@unique([orderId, name])
}

enum UserRole {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPING
  DELIVERED
  CANCELLED
}
